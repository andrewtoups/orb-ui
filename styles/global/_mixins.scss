@mixin mask {
    position: absolute; display: block;
    height: 100%; width: 100%;
    top: 0; left: 0;
}

@mixin pseudo-clone($layer: 'before', $content: '', $position: relative) {
    position: $position;
    @if $layer == 'before' {
        &:before {
            content: $content;
            @include mask;
        }
    } @else {
        &:after {
            content: $content;
            pointer-events: none;
            @include mask;
        }
    }
}

// future reference: 
// https://graphicdesign.stackexchange.com/questions/113007/how-to-determine-the-equivalent-opaque-rgb-color-for-a-given-partially-transpare
// https://en.wikipedia.org/wiki/Transparency_%28graphic%29#Compositing_calculations
@function op-form($opacity, $trans, $bg) {
    @return $trans + (1-$opacity)*$bg;
}

@function opacity-compensate($background-color, $translucent-color){
    $redT: red($translucent-color);
    $redB: red($background-color);
    $greenT: green($translucent-color);
    $greenB: green($background-color);
    $blueT: blue($translucent-color);
    $blueB: blue($background-color);
    $p: alpha($translucent-color);

    $result: rgba(op-form($p, $redT, $redB), op-form($p, $greenT, $greenB), op-form($p, $blueT, $blueB), $p);
    @return $result;
}